import os, sys, io, math, zlib, base64, json
from pathlib import Path
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import eca_gnn.ca_toolbox as eca

def quick_checks_light(rules=(0,50,90,110,30), N=256, T_simple=128, T_rand=256, seed_p=0.5, drop_transient=32):
    rows = []
    packs = {}
    for r in rules:
        ca = eca.CA1D.from_eca(r, N=N)
        lam = eca.langton_lambda(ca.rule_table, k=2, q=0, n=3)
        mu = eca.mu_sensitivity(ca.rule_table, n=3)
        theta = eca.theta_obstruction(ca.rule_table, n=3)
        Ms = eca.mean_field_cluster(ca.rule_table, k=2, q=0, n=3)
        f = eca.mean_field_map_fun(ca.rule_table, n=3)
        eps = 1e-6; d0 = (f(eps)-f(0.0))/eps

        xs_simple = eca.CA1D.from_eca(r, N=N-1).evolve(eca.seed_simple(N-1), T=T_simple)  # odd width triangle
        xs_rand = ca.evolve(eca.seed_random(ca.N, seed_p), T=T_rand)

        gamma_simple = eca.compressibility_ratio(xs_simple)
        gamma_rand = eca.compressibility_ratio(xs_rand[drop_transient:])
        freqs, S = eca.power_spectrum(xs_rand[drop_transient:])
        kmax = min(64, len(freqs)-1)
        if kmax > 2:
            ff = freqs[1:kmax].astype(float); SS = S[1:kmax].astype(float)
            beta = float(np.polyfit(np.log(ff+1e-9), np.log(SS+1e-12), 1)[0])
        else:
            beta = float("nan")

        rows.append(dict(rule=r, lambda_=lam, mu=mu, theta=theta, MF_Ms=str(Ms),
                         d_f0=d0, gamma_simple=gamma_simple, gamma_rand=gamma_rand, spec_beta=beta))
        packs[r] = dict(xs_simple=xs_simple, xs_rand=xs_rand, freqs=freqs, S=S)
    df = pd.DataFrame(rows)
    return df, packs

def save_spacetime_png(xs, path, title):
    # Show as image; each chart must be standalone.
    plt.figure()
    plt.imshow(xs, aspect="auto", interpolation="nearest")
    plt.title(title)
    plt.xlabel("site"); plt.ylabel("time")
    plt.tight_layout()
    plt.savefig(path, dpi=120)
    plt.close()

def save_spectrum_png(freqs, S, path, title):
    # Plot on log-log; single axis.
    plt.figure()
    # avoid zero
    ff = freqs[1:].astype(float); SS = S[1:].astype(float) + 1e-12
    plt.loglog(ff, SS)
    plt.xlabel("frequency")
    plt.ylabel("power")
    plt.title(title)
    plt.tight_layout()
    plt.savefig(path, dpi=120)
    plt.close()

def render_report(df, packs, out_html, assets_dir):
    assets_dir = Path(assets_dir).absolute()
    assets_dir.mkdir(parents=True, exist_ok=True)
    parts = []
    parts.append("<h1>CA Reproduction Sanity Checks</h1>")
    parts.append("<p>Toolbox: <code> ca_toolbox.py </code></p>")
    parts.append("<h2>Core Metrics</h2>")
    dff = df.copy()
    dff["lambda_"] = dff["lambda_"].round(3)
    dff["mu"] = dff["mu"].round(3)
    dff["theta"] = dff["theta"].round(5)
    dff["d_f0"] = dff["d_f0"].round(6)
    dff["gamma_simple"] = dff["gamma_simple"].round(6)
    dff["gamma_rand"] = dff["gamma_rand"].round(6)
    dff["spec_beta"] = dff["spec_beta"].round(3)
    parts.append(dff.to_html(index=False, escape=False))
    parts.append("<h2>Per‑Rule Visuals</h2>")

    for r, pack in packs.items():
        parts.append(f"<h3>Rule {r}</h3>")
        sp_simple = assets_dir / f"rule{r}_simple.png"
        sp_rand   = assets_dir / f"rule{r}_rand.png"
        sp_spec   = assets_dir / f"rule{r}_spectrum.png"
        save_spacetime_png(pack['xs_simple'], sp_simple, f"Rule {r} — simple seed")
        save_spacetime_png(pack['xs_rand'],   sp_rand,   f"Rule {r} — random seed")
        save_spectrum_png(pack['freqs'], pack['S'], sp_spec, f"Rule {r} — power spectrum (random seed)")

        parts.append(f'<p><img src="{sp_simple}" width="480"></p>')
        parts.append(f'<p><img src="{sp_rand}" width="480"></p>')
        parts.append(f'<p><img src="{sp_spec}" width="480"></p>')

    html = """
<!DOCTYPE html>
<html><head><meta charset="utf-8"><title>CA Reproduction Sanity Checks</title></head>
<body>
{body}
<hr/>
<p><em>Generated by sanity_check.py</em></p>
</body></html>
""".format(body="\n".join(parts))
    with open(out_html, "w", encoding="utf-8") as f:
        f.write(html)

def run_sanity_check(
    rules: list = [8,76,50,18,110],
    N: int = 256,
    out: str = "./data/ca_report.html",
    assets: str = "./data/ca_report_assets"
):
    df, packs = quick_checks_light(rules=rules, N=N)
    os.makedirs(assets, exist_ok=True)
    render_report(df, packs, out, assets)

def main():
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument("--rules", type=str, default="8,76,50,18,110")
    p.add_argument("--N", type=int, default=256)
    p.add_argument("--out", type=str, default="./data/ca_report.html")
    p.add_argument("--assets", type=str, default="./data/ca_report_assets")
    args = p.parse_args()

    rules = [int(x) for x in args.rules.split(",") if x.strip()]
    run_sanity_check(rules, args.N, args.out, args.assets)

if __name__ == "__main__":
    main()